#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["c#","cs"],"languageName":"C#","name":"csharp"},{"aliases":["f#","fs"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"}]}}

#!markdown

# Table of Contents

- [Table of Contents](#table-of-contents)
- [What is PowerShell?](#what-is-powershell)
    - [What is .NET?](#what-is-net)
    - [First PowerShell Script](#first-powershell-script)
- [First PowerShell Script](#first-powershell-script)
    - [Syntax](#syntax)
- [Get Help](#get-help)
    - [Interpreting The Help](#interpreting-the-help)
- [Commands](#commands)
    - [Common Parameters](#common-parameters)
    - [Naming Convention](#naming-convention)
- [Providers](#providers)
- [Pipeline](#pipeline)

#!markdown

# What is PowerShell?

`PowerShell` is a task automation and configuration management framework from Microsoft, consisting of a command-line shell and associated scripting language built on the `.NET Framework`. PowerShell is intended to be a cross-platform (Windows, Linux, and macOS) shell and scripting language. PowerShell is built on the .NET Framework, allowing you to leverage .NET as well as PowerShell to automate tasks on any platform where .NET Core or PowerShell is available.

#!markdown

## What is .NET?

`.NET` is a free, cross-platform, open source developer platform for building many different types of applications. With .NET, you can use multiple languages, editors, and libraries to build for web, mobile, desktop, games, and IoT. .NET is composed of two parts: `.NET Framework` and `.NET Core`. The .NET Framework is a Windows-only implementation of .NET. The .NET Core is a cross-platform implementation of .NET that runs on Windows, macOS, and Linux. .NET consists of the following components:

- .NET Language - Programming language like C#, F#, and Visual Basic to write source code
- .NET Compiler - Roslyn to compile source code into Intermediate Language (IL)
- .NET Assembly - IL files are compiled into assemblies (DLLs or EXEs) that can be executed
- .NET Runtime - Common Language Runtime (CLR) is used to execute assemblies
- .NET Class Library - a collection of classes and methods that can be used to build applications
- .NET Framework - a collection of assemblies that are used to build applications

#!markdown

## First PowerShell Script

Write your first `PowerShell` script! It outputs a string to the console.

> Hover your mouse over the following code. On the left side, a little `play` icon should show up. Click that and the code will run!

#!pwsh

$my_str = "Hello world"
Write-Host $my_str
# Write-Host is not needed, but it's a good practice to use it

#!markdown

NOTE: If above doesn't work then make sure you have `.Net 7` and `PowerShell 7` installed on your machine.

You can run `dotnet --list-sdks` and `$PSVersionTable` in your terminal to check if you have the correct versions installed.

#!markdown

## Syntax

- `PowerShell` is case-insensitive and follow similar syntax to C#
- PowerShell does not care if you use `/` or `\` as the directory separator
- Use a backtick(`` ` ``) to continue a command on the next line
- Use a semicolon(`;`) to separate commands on the same line
- To declare a comment, use a number sign(`#`)
- To be continued...

#!markdown

# Get Help

PowerShell has a fantastic help system. You can get help on any command by using the `Get-Help` command. For example, to get help on the `Write-Host` command, you can run the following command:

#!pwsh

Get-Help Write-Host

#!markdown

You can also use wildcards(`*` or `?`) and the alias `help` or `man` as a substitute for `Get-Help`. The wildcard `*` matches any number of characters and the wildcard `?` matches any single character.

Add the parameter:
+ `-Full` to get the full help guide
+ `-Examples` to get examples of how to use the command
+ `-Online` to get the online help guide which are more up to date

Examples:

#!pwsh

help *write*
#man Write-Host -Full
#Get-Help Write-Host -Examples
#get-help write-host -online

#!markdown

> NOTE: Update `Get-Help` by running `Update-Help`

#!markdown

## Interpreting The Help

What use is the help system if you do not know how to read it properly. Let's learn how to understand what you're looking at. Run the code below and take a look at the *syntax* row.

#!pwsh

get-help get-item
#get-help gci # alternative using an alias

#!markdown

Notice in the **syntax** row that it is listed twice, which means that the command supports two parameter sets. Depending on what parameters are passed in then the command will act differently. At least one unique parameter exists in each parameter set.

You do not need to use every single parameter in order to make the command to run. Optional parameters are in square brackets `[]` while mandatory parameters are not. Additionally, positional parameters are in double square brackets `[[]]`. Notice that the parameter set also indicates what kind of input each accept like `System.String` and `Int`.

#!markdown

# Commands

Powershell is a shell that runs commands. You can run commands by typing them directly into the shell or by running a script. You can also run commands from a script file, which is a file that contains a series of commands. Run a script file by typing the name of the file at the command prompt or by using the `Invoke-Expression` cmdlet.

#!pwsh

Get-Help # running a command
my_script.ps1 # running a script
Invoke-Expression # running a command from a string

#!markdown

Let's take a look at full-form syntax of a command and break it down:

`Get-Command -Verb Get -Module PSReadLine,PowerShellGet -Syntax`

- `Get-Command` - The cmdlet name
- `-Verb Get` - The parameter name and value
- `-Module PSReadLine,PowerShellGet` - The parameter name and values(comma separated)
- `-Syntax` - a switch parameter with no value needed

> NOTE: There is a mandatory space after the parameter name and between the parameters value. Nothing here is *case-sensitive*.

#!markdown

## Common Parameters

All PowerShell commands have a set of common parameters that you can use to customize the behavior of the command. Access the parameters by running `Help *common*`:

- Verbose
- Debug
- WarningAction
- WarningVariable
- ErrorAction
- ErrorVariable
- OutVariable
- OutBuffer
- InformationAction
- InformationVariable
- PipelineVariable

#!markdown

## Naming Convention

Before moving forward we need to discuss some terminology. Microsoft has established a naming convention and we should consider following it.

- A *cmdlet(command-let)* is a command that is designed to be used in a pipeline. Cmdlets are the most common type of command in PowerShell and are otherwise known as command-line utility. 
- A *function* is a block of code that performs a specific task. Functions are used to group a series of commands together to perform a specific task. Functions are also used to create reusable code.

Each cmdlet has a *verb* and a *noun*. The verb describes the action that the cmdlet performs and the noun describes the object that the cmdlet acts on. For example, the `Get-Process` cmdlet gets processes. The verb is `Get` and the noun is `Process`. The verb and noun are separated by a hyphen(`-`).

#!markdown

# Providers

A *provider* or *PSProvider* is a PowerShell component/adapter that enables you to access and manipulate data in a specific data store. Some examples are:

- `FileSystem` provider enables you to access and manipulate files and folders on your computer.
- `Registry` provider enables you to access and manipulate the Windows registry.
- `Environment` provider enables you to access and manipulate environment variables.
- `Variable` provider enables you to access and manipulate variables.
- `Alias` provider enables you to access and manipulate aliases.
- `Function` provider enables you to access and manipulate functions.
- `Help` provider enables you to access and manipulate help topics.
- `Certificate` provider enables you to access and manipulate certificates. 
- `WSMan` provider enables you to access and manipulate Windows PowerShell remoting sessions.
- `PSDrive` provider enables you to access and manipulate PSDrives.
- `Module` provider enables you to access and manipulate modules.
- `Script` provider enables you to access and manipulate scripts.

Run `Get-PSProvider` to get a list of all the providers. You can also run `Get-PSProvider -ListAvailable` to get a list of all the providers that are available on your system. Notice that each provider has different capabilities. For example, the `FileSystem` provider has the `Get-ChildItem` cmdlet which is used to get the contents of a folder. The `Registry` provider has the `Get-Item` cmdlet which is used to get the contents of a registry key. Some common capabilities are:

- **ShouldProcess** - Indicates whether the cmdlet supports the `WhatIf` and `Confirm` parameters to test certain actions before committing them.
- **Filter** - Indicates whether the cmdlet supports the `Filter` parameter to manipulate the output.
- **Credential** - Indicates whether the cmdlet supports the `Credential` parameter to specify a credential to use when connecting to a remote computer.

#!pwsh

Get-PSProvider

#!markdown

# Pipeline

PowerShell connects commands to each other by using a *pipeline*. A pipeline is a series of commands that are connected by using the pipeline operator or vertical bar `|`. The output of one command is sent to the next command in the pipeline and is displayed on the screen.

#!pwsh

Get-ChildItem | Sort
#Get-Process | Export-CSV processes.csv

#!markdown

We can also pipe to a file using the `Out-File` cmdlet or by using the redirection operator `>`.

#!pwsh

Dir > my_dir.txt
#Dir | Out-File my_dir.txt # is the same

#!markdown

Connecting more and more commands allows you to have increasingly powerful command lines. Each command handles a single set in the process and the entire command line as a whole accomplishes a useful task.

#!pwsh

#Get-Process | Stop-Process -Confirm # DO NOT RUN THIS COMMAND
Get-Process | Stop-Process -WhatIf # Preview what would happen if ran
